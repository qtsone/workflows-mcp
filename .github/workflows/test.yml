name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run all tests
        run: |
          uv run pytest tests/ -v \
            --cov=workflows_mcp \
            --cov-report=xml \
            --cov-report=term-missing \
            --tb=short

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: tests
          fail_ci_if_error: false

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run ruff
        run: |
          uv run ruff check src/workflows_mcp/ tests/
          uv run ruff format --check src/workflows_mcp/ tests/

      - name: Run mypy
        run: uv run mypy src/workflows_mcp/
        continue-on-error: true

  workflows:
    name: Validate Workflows
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Validate and load workflows
        run: |
          uv run python -c "
          from pathlib import Path
          from workflows_mcp.engine.registry import WorkflowRegistry
          import yaml

          # Validate YAML syntax
          templates_dir = Path('src/workflows_mcp/templates')
          workflow_files = list(templates_dir.rglob('*.yaml'))

          print(f'📋 Validating {len(workflow_files)} workflow files...\n')
          errors = []

          for wf_file in workflow_files:
              try:
                  with open(wf_file) as f:
                      yaml.safe_load(f)
                  print(f'✅ {wf_file.relative_to(templates_dir)}')
              except Exception as e:
                  error_msg = f'❌ {wf_file.relative_to(templates_dir)}: {e}'
                  errors.append(error_msg)
                  print(error_msg)

          if errors:
              print(f'\n❌ {len(errors)} workflow(s) failed validation')
              exit(1)

          # Test workflow loading
          print(f'\n📦 Loading workflows into registry...\n')
          registry = WorkflowRegistry()
          result = registry.load_from_directory(str(templates_dir))

          if not result.is_success:
              print(f'❌ Failed to load workflows: {result.error}')
              exit(1)

          workflows = registry.list_all_metadata()
          print(f'✅ Successfully loaded {len(workflows)} workflows\n')

          for wf in sorted(workflows, key=lambda x: x['name']):
              tags = wf.get('tags', [])
              tag_str = f' [{', '.join(tags)}]' if tags else ''
              print(f'  • {wf[\"name\"]}{tag_str}')
          "

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [tests, quality, workflows]
    if: always()

    steps:
      - name: Report results
        run: |
          echo "## 📊 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflows | ${{ needs.workflows.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if all jobs passed
          if [ "${{ needs.tests.result }}" == "success" ] && \
             [ "${{ needs.quality.result }}" == "success" ] && \
             [ "${{ needs.workflows.result }}" == "success" ]; then
            echo "✅ **All checks passed!**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **Some checks failed**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
