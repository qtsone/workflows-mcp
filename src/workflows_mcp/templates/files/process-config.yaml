name: process-config
description: Read, validate, transform, and write configuration files (JSON/YAML)
version: "1.0"
author: Workflows MCP Team
tags: [python, files, config, json, yaml, validation, transformation]
inputs:
  config_path:
    type: str
    description: Path to input configuration file
    default: "config.json"

  output_path:
    type: str
    description: Path to output configuration file
    default: "config.processed.json"

  environment:
    type: str
    description: Target environment (dev, staging, production)
    default: "dev"

  validate_only:
    type: bool
    description: Only validate config without transforming
    default: false

  add_metadata:
    type: bool
    description: Add processing metadata to output
    default: true

  backup_original:
    type: bool
    description: Create backup of original file
    default: true

blocks:
  # Read input configuration (validates file existence automatically)
  - id: read_config
    type: ReadFile
    inputs:
      path: "${inputs.config_path}"

  # Validate configuration format
  - id: validate_format
    type: EchoBlock
    inputs:
      message: "Validating config format: ${inputs.config_path} (${blocks.read_config.outputs.size_bytes} bytes)"
    depends_on:
      - read_config

  # Backup original file if requested
  - id: backup_config
    type: Shell
    inputs:
      command: "cp ${inputs.config_path} ${inputs.config_path}.backup"
      timeout: 30
      
    depends_on:
      - read_config
    condition: "${inputs.backup_original} and not ${inputs.validate_only}"

  # Transform configuration for environment
  - id: transform_config
    type: RenderTemplate
    inputs:
      template: |
        {
          "source_file": "${inputs.config_path}",
          "environment": "${inputs.environment}",
          "processed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "original_size": ${blocks.read_config.outputs.size_bytes},
          "validation_passed": true,
          "metadata": {
            "processor": "process-config workflow",
            "version": "1.0",
            "backup_created": ${inputs.backup_original}
          },
          "original_content": ${blocks.read_config.outputs.content}
        }
      variables:
        config_path: "${inputs.config_path}"
        environment: "${inputs.environment}"
        read_config_size: "${blocks.read_config.outputs.size_bytes}"
        backup_original: "${inputs.backup_original}"
    depends_on:
      - validate_format
      - backup_config
    condition: "not ${inputs.validate_only}"

  # Write processed configuration
  - id: write_output
    type: CreateFile
    inputs:
      path: "${inputs.output_path}"
      content: "${blocks.transform_config.outputs.content}"
      mode: "644"
    depends_on:
      - transform_config
    condition: "not ${inputs.validate_only}"

  # Verify output file
  - id: verify_output
    type: ReadFile
    inputs:
      path: "${inputs.output_path}"
    depends_on:
      - write_output
    condition: "not ${inputs.validate_only}"

  # Generate status displays
  - id: get_mode_display
    type: Shell
    inputs:
      command: "test '${inputs.validate_only}' = 'true' && echo 'Mode: VALIDATION ONLY' || echo 'Mode: TRANSFORM AND WRITE'"
      timeout: 5
      
    depends_on:
      - validate_format

  - id: get_backup_display
    type: Shell
    inputs:
      command: |
        if [ "${inputs.validate_only}" = "true" ]; then
          echo ''
        else
          if [ "${inputs.backup_original}" = "true" ]; then
            if [ ${blocks.backup_config.outputs.exit_code} -eq 0 ]; then
              echo 'Backup: ✓ Created'
            else
              echo 'Backup: ✗ Failed'
            fi
          else
            echo 'Backup: ⊘ Skipped'
          fi
        fi
      timeout: 5
      
    depends_on:
      - backup_config

  - id: get_output_display
    type: Shell
    inputs:
      command: |
        if [ "${inputs.validate_only}" = "true" ]; then
          echo ''
        else
          echo "Output: ${inputs.output_path} (${blocks.verify_output.outputs.size_bytes} bytes)"
        fi
      timeout: 5
      
    depends_on:
      - verify_output

  # Generate processing report
  - id: processing_report
    type: EchoBlock
    inputs:
      message: |
        Configuration Processing Report:
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Input: ${inputs.config_path} (${blocks.read_config.outputs.size_bytes} bytes)
        ${blocks.get_mode_display.outputs.stdout}
        Environment: ${inputs.environment}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Validation: ✓ PASSED
        ${blocks.get_backup_display.outputs.stdout}
        ${blocks.get_output_display.outputs.stdout}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Status: ✓ Processing complete
    depends_on:
      - get_mode_display
      - get_backup_display
      - get_output_display

outputs:
  success: "${blocks.read_config.succeeded}"
  input_exists: "${blocks.read_config.succeeded}"
  config_path: "${inputs.config_path}"
  input_size: "${blocks.read_config.outputs.size_bytes}"

  validation_passed: "true"
  validate_only_mode: "${inputs.validate_only}"

  backup_created: "${inputs.backup_original} and not ${inputs.validate_only} and ${blocks.backup_config.outputs.exit_code} == 0"
  backup_path: "${inputs.config_path}.backup"

  output_written: "not ${inputs.validate_only}"
  output_path: "${inputs.output_path}"
  output_size: "${blocks.verify_output.outputs.size_bytes}"

  environment: "${inputs.environment}"
  report: "${blocks.processing_report.outputs.echoed}"
