name: python-ci-pipeline
description: Complete Python CI pipeline with environment setup, linting, and testing
version: "1.0"
author: Workflows MCP Team
tags: [ci, python, pipeline, testing, linting, quality]
inputs:
  project_path:
    type: str
    description: Project directory path
    default: "."

  python_version:
    type: str
    description: Python version to use
    default: "3.12"

  skip_setup:
    type: bool
    description: Skip environment setup (assume already set up)
    default: false

  coverage_threshold:
    type: int
    description: Minimum test coverage percentage
    default: 80

  strict_linting:
    type: bool
    description: Enable strict mode for mypy
    default: false

blocks:
  # Stage 1: Setup Python environment
  - id: setup_env
    type: Workflow
    inputs:
      workflow: "setup-python-env"
      inputs:
        python_version: "${inputs.python_version}"
        project_path: "${inputs.project_path}"
        requirements_file: "requirements.txt"
        upgrade_pip: true
    condition: "not ${inputs.skip_setup}"

  # Stage 2: Run linting (parallel with setup verification)
  - id: run_linting
    type: Workflow
    inputs:
      workflow: "lint-python"
      inputs:
        working_dir: "${inputs.project_path}"
        src_path: "src/"
        strict_mode: "${inputs.strict_linting}"
        fix_issues: false
        skip_mypy: false
        venv_path: "${inputs.project_path}/.venv"
    depends_on:
      - setup_env

  # Stage 3: Run tests (parallel with linting)
  - id: run_tests
    type: Workflow
    inputs:
      workflow: "run-pytest"
      inputs:
        working_dir: "${inputs.project_path}"
        test_path: "tests/"
        coverage_threshold: "${inputs.coverage_threshold}"
        verbose: true
        generate_html_report: true
        venv_path: "${inputs.project_path}/.venv"
    depends_on:
      - setup_env

  # Get setup status display
  - id: get_setup_display_skipped
    type: Shell
    inputs:
      command: "echo 'Setup: SKIPPED'"
      timeout: 5

    condition: "${inputs.skip_setup}"

  - id: get_setup_display_passed
    type: Shell
    inputs:
      command: "echo 'Setup: ✓ PASSED'"
      timeout: 5

    condition: "not ${inputs.skip_setup} and ${blocks.setup_env.succeeded}"
    depends_on:
      - setup_env

  - id: get_setup_display_failed
    type: Shell
    inputs:
      command: "echo 'Setup: ✗ FAILED'"
      timeout: 5

    condition: "not ${inputs.skip_setup} and not ${blocks.setup_env.succeeded}"
    depends_on:
      - setup_env

  - id: get_setup_display
    type: Shell
    inputs:
      command: |
        STATUS_SKIPPED="${blocks.get_setup_display_skipped.outputs.stdout}"
        STATUS_PASSED="${blocks.get_setup_display_passed.outputs.stdout}"
        STATUS_FAILED="${blocks.get_setup_display_failed.outputs.stdout}"
        if [ -n "$STATUS_SKIPPED" ]; then
          echo "$STATUS_SKIPPED"
        elif [ -n "$STATUS_PASSED" ]; then
          echo "$STATUS_PASSED"
        else
          echo "$STATUS_FAILED"
        fi
      timeout: 5

    depends_on:
      - get_setup_display_skipped
      - get_setup_display_passed
      - get_setup_display_failed

  - id: get_linting_display
    type: Shell
    inputs:
      command: "test '${blocks.run_linting.outputs.all_passed}' = 'true' && echo '✓ PASSED' || echo '✗ FAILED'"
      timeout: 5

    depends_on:
      - run_linting

  - id: get_testing_display
    type: Shell
    inputs:
      command: "test '${blocks.run_tests.succeeded}' = 'true' && echo '✓ PASSED' || echo '✗ FAILED'"
      timeout: 5

    depends_on:
      - run_tests

  - id: get_overall_display_success
    type: Shell
    inputs:
      command: "echo '✓ ALL CHECKS PASSED'"
      timeout: 5

    condition: "(${inputs.skip_setup} or ${blocks.setup_env.succeeded}) and ${blocks.run_linting.outputs.all_passed} and ${blocks.run_tests.succeeded}"
    depends_on:
      - get_setup_display
      - get_linting_display
      - get_testing_display

  - id: get_overall_display_failed
    type: Shell
    inputs:
      command: "echo '✗ PIPELINE FAILED'"
      timeout: 5

    condition: "not ((${inputs.skip_setup} or ${blocks.setup_env.succeeded}) and ${blocks.run_linting.outputs.all_passed} and ${blocks.run_tests.succeeded})"
    depends_on:
      - get_setup_display
      - get_linting_display
      - get_testing_display

  - id: get_overall_display
    type: Shell
    inputs:
      command: |
        STATUS_SUCCESS="${blocks.get_overall_display_success.outputs.stdout}"
        STATUS_FAILED="${blocks.get_overall_display_failed.outputs.stdout}"
        if [ -n "$STATUS_SUCCESS" ]; then
          echo "$STATUS_SUCCESS"
        else
          echo "$STATUS_FAILED"
        fi
      timeout: 5

    depends_on:
      - get_overall_display_success
      - get_overall_display_failed

  # Stage 4: Validate results
  - id: validate_pipeline
    type: EchoBlock
    inputs:
      message: |
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Python CI Pipeline Results
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        ${blocks.get_setup_display.outputs.stdout}
        Linting: ${blocks.get_linting_display.outputs.stdout}
        Testing: ${blocks.get_testing_display.outputs.stdout}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        Overall Status: ${blocks.get_overall_display.outputs.stdout}
        ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    depends_on:
      - get_overall_display

outputs:
  # Overall status
  success: "${(${inputs.skip_setup} or ${blocks.setup_env.succeeded}) and ${blocks.run_linting.outputs.all_passed} and ${blocks.run_tests.succeeded}}"

  # Environment setup results
  env_setup_success: "${inputs.skip_setup} or ${blocks.setup_env.succeeded}"
  python_version: "${inputs.python_version}"

  # Linting results
  linting_passed: "${blocks.run_linting.outputs.all_passed}"
  ruff_passed: "${blocks.run_linting.outputs.ruff_passed}"
  mypy_passed: "${blocks.run_linting.outputs.mypy_passed}"
  format_passed: "${blocks.run_linting.outputs.format_passed}"

  # Testing results
  tests_passed: "${blocks.run_tests.succeeded}"
  test_exit_code: "${blocks.run_tests.outputs.exit_code}"

  # Summary
  pipeline_summary: "${blocks.validate_pipeline.outputs.echoed}"
  execution_time_ms: "${blocks.validate_pipeline.metadata.execution_time_ms}"
