# Sequential Echo Workflow
#
# Demonstrates sequential execution with dependency chains:
# - Multiple blocks executing in order (block1 → block2 → block3)
# - Explicit dependency declaration with depends_on
# - Variable substitution from previous block outputs
# - DAG resolution for sequential execution
# - Output chaining through variables
#
# Usage:
#   execute_workflow("sequential-echo")
#   execute_workflow("sequential-echo", {"initial_message": "Start here"})

name: sequential-echo
description: Three echo blocks executing sequentially with output chaining
version: "1.0"
author: Workflows MCP Team
tags: [example, tutorial, sequential, dependencies, chaining]
# Initial message input
inputs:
  initial_message:
    type: str
    description: Starting message for the chain
    default: "Step 1"

# Three blocks in strict sequential order
blocks:
  # First block - uses workflow input
  - id: echo_first
    type: EchoBlock
    inputs:
      message: "${inputs.initial_message}"
      delay_ms: 100
    # No dependencies - executes first

  # Second block - depends on first block
  - id: echo_second
    type: EchoBlock
    inputs:
      # Reference output from previous block
      message: "Previous: ${blocks.echo_first.outputs.echoed}"
      delay_ms: 100
    depends_on:
      - echo_first # Must wait for echo_first to complete

  # Third block - depends on second block
  - id: echo_third
    type: EchoBlock
    inputs:
      # Chain another level - reference echo_second output
      message: "Final: ${blocks.echo_second.outputs.echoed}"
      delay_ms: 100
    depends_on:
      - echo_second # Must wait for echo_second to complete

# Output the final result from the chain
outputs:
  first_output: "${blocks.echo_first.outputs.echoed}"
  second_output: "${blocks.echo_second.outputs.echoed}"
  final_output: "${blocks.echo_third.outputs.echoed}"
  total_time_ms: "${blocks.echo_third.metadata.execution_time_ms}"
