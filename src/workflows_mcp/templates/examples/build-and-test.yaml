name: build-and-test
description: Complete build and test workflow demonstrating Shell usage
version: "1.0"
author: "workflows-mcp"
tags: ["build", "validation", "example", "bash"]
inputs:
  project_dir:
    type: str
    description: "Project directory to build and test"
    default: "."

  python_version:
    type: str
    description: "Python version to check"
    default: "3.12"

blocks:
  # Validation phase
  - id: check_python_version
    type: Shell
    inputs:
      command: "python --version"
      working_dir: "${inputs.project_dir}"
      timeout: 10

  - id: check_git_status
    type: Shell
    inputs:
      command: "git status --short"
      working_dir: "${inputs.project_dir}"
      timeout: 10

    depends_on:
      - check_python_version

  # Setup phase
  - id: install_dependencies
    type: Shell
    inputs:
      command: "uv sync"
      working_dir: "${inputs.project_dir}"
      timeout: 300
    depends_on:
      - check_git_status

  # Test phase (parallel)
  - id: run_unit_tests
    type: Shell
    inputs:
      command: "uv run pytest tests/ -v --tb=short"
      working_dir: "${inputs.project_dir}"
      timeout: 300
    depends_on:
      - install_dependencies

  - id: run_linting
    type: Shell
    inputs:
      command: "uv run ruff check src/"
      working_dir: "${inputs.project_dir}"
      timeout: 120

    depends_on:
      - install_dependencies

  - id: run_type_check
    type: Shell
    inputs:
      command: "uv run mypy src/"
      working_dir: "${inputs.project_dir}"
      timeout: 120

    depends_on:
      - install_dependencies

  # Get result statuses
  - id: get_git_status_display
    type: Shell
    inputs:
      command: "test -n '${blocks.check_git_status.outputs.stdout}' && echo 'Modified files' || echo 'Clean'"
      timeout: 5

    depends_on:
      - check_git_status

  - id: get_tests_display
    type: Shell
    inputs:
      command: |
        if [ "${blocks.run_unit_tests.outputs.exit_code}" -eq 0 ]; then
          echo "PASSED ✓"
        else
          echo "FAILED ✗"
        fi
      timeout: 5

    depends_on:
      - run_unit_tests

  - id: get_linting_display
    type: Shell
    inputs:
      command: |
        if [ "${blocks.run_linting.outputs.exit_code}" -eq 0 ]; then
          echo "PASSED ✓"
        else
          echo "FAILED ✗"
        fi
      timeout: 5

    depends_on:
      - run_linting

  - id: get_type_check_display
    type: Shell
    inputs:
      command: |
        if [ "${blocks.run_type_check.outputs.exit_code}" -eq 0 ]; then
          echo "PASSED ✓"
        else
          echo "FAILED ✗"
        fi
      timeout: 5

    depends_on:
      - run_type_check

  # Validation phase
  - id: validate_results
    type: EchoBlock
    inputs:
      message: |
        Build and Test Results:
        ========================
        Python: ${blocks.check_python_version.outputs.stdout}
        Git Status: ${blocks.get_git_status_display.outputs.stdout}

        Tests: ${blocks.get_tests_display.outputs.stdout}
        Linting: ${blocks.get_linting_display.outputs.stdout}
        Type Check: ${blocks.get_type_check_display.outputs.stdout}

        Total Time: ${blocks.run_unit_tests.execution_time_ms + run_linting.execution_time_ms + run_type_check.execution_time_ms}ms
    depends_on:
      - get_git_status_display
      - get_tests_display
      - get_linting_display
      - get_type_check_display

outputs:
  python_version: "${blocks.check_python_version.outputs.stdout}"
  git_status: "${blocks.check_git_status.outputs.stdout}"
  tests_passed: "${blocks.run_unit_tests.succeeded}"
  linting_passed: "${blocks.run_linting.succeeded}"
  type_check_passed: "${blocks.run_type_check.succeeded}"
  all_checks_passed: "${blocks.run_unit_tests.succeeded and blocks.run_linting.succeeded and blocks.run_type_check.succeeded}"
  summary: "${blocks.validate_results.outputs.echoed}"
  total_execution_time_ms: "${blocks.validate_results.metadata.execution_time_ms}"
