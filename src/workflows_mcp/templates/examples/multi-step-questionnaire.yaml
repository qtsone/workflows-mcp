# Multi-Step Questionnaire Workflow - Simplified with Prompt executor
#
# Demonstrates multiple interactive blocks with context accumulation using the unified Prompt executor:
# - Multiple pause/resume cycles in a single workflow
# - Context preservation across pauses
# - Single Prompt executor type handles all interaction patterns
# - Variable references to previous interactive responses
# - Progressive data collection from LLM
#
# This workflow simulates a project setup wizard that collects
# configuration through multiple interactive questions.
#
# Workflow steps:
# 1. Confirm project creation (Prompt)
# 2. Select project type (Prompt with choices in prompt text)
# 3. Enter project name (Prompt)
# 4. Select deployment target (Prompt with choices in prompt text)
# 5. Generate configuration based on responses
# 6. Confirm final setup (Prompt)
# 7. Create project files
#
# Each interactive block pauses the workflow, creates a checkpoint,
# and waits for LLM response before continuing.
#
# Usage:
#   # Start workflow
#   result = execute_workflow("multi-step-questionnaire")
#
#   # Will pause 4 times for user input
#   # Each pause returns checkpoint_id and prompt
#   # Resume with: resume_workflow(checkpoint_id, response)

name: multi-step-questionnaire
description: Interactive project setup wizard with multiple input steps (simplified with Prompt executor)
version: "2.0"
author: MCP Workflows Team
tags: [interactive, questionnaire, wizard, multi-step, example, tutorial]

inputs:
  workspace:
    type: str
    description: Workspace directory for project creation
    default: "/tmp/projects"

blocks:
  # ===== STEP 1: Initial confirmation =====
  - id: confirm_start
    type: Prompt
    inputs:
      prompt: |
        Start interactive project setup wizard?

        Respond with 'yes' or 'no'

  # ===== STEP 2: Select project type =====
  - id: select_project_type
    type: Prompt
    inputs:
      prompt: |
        What type of project do you want to create?

        Choose one:
        1. python-fastapi
        2. python-django
        3. node-express
        4. react-app
        5. rust-actix

        Respond with the project type name (e.g., 'python-fastapi')
    depends_on:
      - confirm_start
    condition: "${blocks.confirm_start.outputs.response} == 'yes'"

  # ===== STEP 3: Get project name =====
  - id: get_project_name
    type: Prompt
    inputs:
      prompt: |
        Enter a project name (lowercase letters, numbers, hyphens only):

        Example: my-awesome-project

        Respond with the project name
    depends_on:
      - select_project_type

  # ===== STEP 4: Select deployment target =====
  - id: select_deployment
    type: Prompt
    inputs:
      prompt: |
        Where will you deploy ${blocks.get_project_name.outputs.response}?

        Choose one:
        1. AWS Lambda
        2. Google Cloud Run
        3. Azure Functions
        4. Docker Container
        5. Kubernetes
        6. Traditional Server

        Respond with the deployment target name (e.g., 'Docker Container')
    depends_on:
      - get_project_name

  # ===== STEP 5: Generate configuration summary =====
  - id: generate_config
    type: Shell
    inputs:
      command: |
        echo "=== Project Configuration ==="
        echo "Project Name: ${blocks.get_project_name.outputs.response}"
        echo "Project Type: ${blocks.select_project_type.outputs.response}"
        echo "Deployment: ${blocks.select_deployment.outputs.response}"
        echo "Workspace: ${inputs.workspace}"
        echo ""
        echo "Configuration generated successfully"
      timeout: 30
    depends_on:
      - select_deployment

  # ===== STEP 6: Final confirmation before creation =====
  - id: confirm_creation
    type: Prompt
    inputs:
      prompt: |
        Create project with these settings?

        - Name: ${blocks.get_project_name.outputs.response}
        - Type: ${blocks.select_project_type.outputs.response}
        - Deploy: ${blocks.select_deployment.outputs.response}

        Respond with 'yes' or 'no'
    depends_on:
      - generate_config

  # ===== STEP 7: Create project structure =====
  - id: create_project
    type: Shell
    inputs:
      command: |
        PROJECT_DIR="${inputs.workspace}/${blocks.get_project_name.outputs.response}"

        echo "Creating project directory: $PROJECT_DIR"
        mkdir -p "$PROJECT_DIR"

        # Create README
        cat > "$PROJECT_DIR/README.md" <<EOF
        # ${blocks.get_project_name.outputs.response}

        Project Type: ${blocks.select_project_type.outputs.response}
        Deployment Target: ${blocks.select_deployment.outputs.response}

        ## Setup

        This project was created using the MCP Workflows interactive wizard.

        ## Deployment

        Target platform: ${blocks.select_deployment.outputs.response}

        Generated on: $(date)
        EOF

        # Create config file
        cat > "$PROJECT_DIR/project.json" <<EOF
        {
          "name": "${blocks.get_project_name.outputs.response}",
          "type": "${blocks.select_project_type.outputs.response}",
          "deployment": "${blocks.select_deployment.outputs.response}",
          "workspace": "${inputs.workspace}",
          "created": "$(date -Iseconds)"
        }
        EOF

        echo "✅ Project created successfully at: $PROJECT_DIR"
        echo "project_path=$PROJECT_DIR"
      timeout: 60
    depends_on:
      - confirm_creation
    condition: "${blocks.confirm_creation.outputs.response} == 'yes'"

  # ===== STEP 8: Success notification =====
  - id: notify_success
    type: Shell
    inputs:
      command: |
        echo "🎉 Project setup complete!"
        echo ""
        echo "Project: ${blocks.get_project_name.outputs.response}"
        echo "Type: ${blocks.select_project_type.outputs.response}"
        echo "Deployment: ${blocks.select_deployment.outputs.response}"
        echo "Location: ${inputs.workspace}/${blocks.get_project_name.outputs.response}"
        echo ""
        echo "All interactive steps completed successfully."
      timeout: 30
    depends_on:
      - create_project
    condition: "${blocks.create_project.succeeded}"

  # ===== STEP 9: Cancellation notification =====
  - id: notify_cancelled
    type: Shell
    inputs:
      command: |
        echo "❌ Project creation cancelled"
        echo "User did not confirm final setup"
      timeout: 30
    depends_on:
      - confirm_creation
    condition: "${blocks.confirm_creation.outputs.response} != 'yes'"

# Workflow outputs
outputs:
  wizard_completed: "${blocks.confirm_start.outputs.response} == 'yes'"
  project_name: "${blocks.get_project_name.outputs.response}"
  project_type: "${blocks.select_project_type.outputs.response}"
  deployment_target: "${blocks.select_deployment.outputs.response}"
  project_created: "${blocks.create_project.succeeded}"
  project_path: "${inputs.workspace}/${blocks.get_project_name.outputs.response}"

  # Individual response fields
  start_confirmed: "${blocks.confirm_start.outputs.response} == 'yes'"
  response_project_type: "${blocks.select_project_type.outputs.response}"
  response_project_name: "${blocks.get_project_name.outputs.response}"
  response_deployment: "${blocks.select_deployment.outputs.response}"
  creation_confirmed: "${blocks.confirm_creation.outputs.response} == 'yes'"

# How to use this workflow:
#
# This workflow demonstrates multiple pause/resume cycles with the simplified Prompt executor:
#
# 1. First execution - pauses at confirm_start:
#    execute_workflow("multi-step-questionnaire")
#    → {"status": "paused", "checkpoint_id": "pause_001", "prompt": "Start wizard?"}
#
# 2. Resume with "yes" - pauses at select_project_type:
#    resume_workflow("pause_001", "yes")
#    → {"status": "paused", "checkpoint_id": "pause_002", "prompt": "Select project type..."}
#
# 3. Resume with project type name - pauses at get_project_name:
#    resume_workflow("pause_002", "python-fastapi")
#    → {"status": "paused", "checkpoint_id": "pause_003", "prompt": "Enter project name..."}
#
# 4. Resume with project name - pauses at select_deployment:
#    resume_workflow("pause_003", "my-awesome-app")
#    → {"status": "paused", "checkpoint_id": "pause_004", "prompt": "Select deployment..."}
#
# 5. Resume with deployment choice - pauses at confirm_creation:
#    resume_workflow("pause_004", "Docker Container")
#    → {"status": "paused", "checkpoint_id": "pause_005", "prompt": "Create project?"}
#
# 6. Resume with final confirmation - completes workflow:
#    resume_workflow("pause_005", "yes")
#    → {"status": "success", "outputs": {...}}
#
# Key features demonstrated:
# - Multiple pause/resume cycles in single workflow
# - Context accumulation across pauses
# - Variable references to previous responses
# - Single Prompt executor for all interaction types
# - Conditional execution based on responses
# - Workflows handle response interpretation (not executor)
# - Final confirmation before side effects
#
# Benefits of simplified Prompt executor:
# - No choice index to manage - workflow uses raw response
# - No validation patterns - prompt instructs format
# - Single executor type to learn and understand
# - Maximum flexibility in response interpretation
#
# Checkpoint management:
# - Each pause creates a new checkpoint
# - Old checkpoints remain valid (can go back)
# - Use list_checkpoints() to see all paused states
# - Use delete_checkpoint() to clean up
# - Paused checkpoints don't auto-expire
