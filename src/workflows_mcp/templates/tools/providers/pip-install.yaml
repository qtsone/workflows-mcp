name: pip-install
description: Install Python package using pip with version constraints and venv support
version: "1.0"
author: Workflows MCP Team
tags: [tools, provider, pip, python, installation]

inputs:
  package_name:
    type: str
    description: Package name to install (e.g., "pytest", "ruff")
    required: true

  version:
    type: str
    description: Version constraint (e.g., ">=7.0.0", "==7.4.3", "~=7.4")
    default: ""

  venv_path:
    type: str
    description: Virtual environment path (e.g., ".venv", "venv")
    default: ""

  extra_args:
    type: str
    description: Additional pip arguments (e.g., "--upgrade", "--no-cache-dir")
    default: ""

  extras:
    type: str
    description: Package extras to install (e.g., "testing,dev")
    default: ""

blocks:
  # Build pip installation command
  - id: build_install_command
    type: Shell
    inputs:
      command: |
        # Determine pip executable (prefer venv if available)
        if [ -n "${inputs.venv_path}" ] && [ -f "${inputs.venv_path}/bin/pip" ]; then
          PIP="${inputs.venv_path}/bin/pip"
        else
          PIP="pip"
        fi

        # Build package specification
        PACKAGE="${inputs.package_name}"

        # Add extras if provided
        if [ -n "${inputs.extras}" ]; then
          PACKAGE="${PACKAGE}[${inputs.extras}]"
        fi

        # Add version constraint if provided
        if [ -n "${inputs.version}" ]; then
          PACKAGE="${PACKAGE}${inputs.version}"
        fi

        # Build full command
        CMD="$PIP install \"$PACKAGE\" ${inputs.extra_args}"
        echo "$CMD"
      timeout: 5
      

  # Execute pip install
  - id: install_package
    type: Shell
    inputs:
      command: "${blocks.build_install_command.outputs.stdout}"
      timeout: 300
      
    depends_on:
      - build_install_command

  # Verify installation succeeded
  - id: verify_installation
    type: Shell
    inputs:
      command: |
        # Determine python executable (prefer venv if available)
        if [ -n "${inputs.venv_path}" ] && [ -f "${inputs.venv_path}/bin/python" ]; then
          PYTHON="${inputs.venv_path}/bin/python"
        else
          PYTHON="python3"
        fi

        # Try to import the package
        if $PYTHON -c "import ${inputs.package_name}" 2>/dev/null; then
          # Get installed version
          VERSION=$($PYTHON -c "import ${inputs.package_name}; print(getattr(${inputs.package_name}, '__version__', 'unknown'))" 2>/dev/null || echo "unknown")
          echo "$VERSION"
        else
          echo "not_installed"
        fi
      timeout: 10
      
    depends_on:
      - install_package

  # Determine installation location
  - id: get_install_location
    type: Shell
    inputs:
      command: |
        # Determine python executable (prefer venv if available)
        if [ -n "${inputs.venv_path}" ] && [ -f "${inputs.venv_path}/bin/python" ]; then
          PYTHON="${inputs.venv_path}/bin/python"
        else
          PYTHON="python3"
        fi

        # Get package location
        LOCATION=$($PYTHON -c "import ${inputs.package_name}; import os; print(os.path.dirname(${inputs.package_name}.__file__))" 2>/dev/null || echo "unknown")
        echo "$LOCATION"
      timeout: 10
      
    depends_on:
      - verify_installation

  # Generate installation summary
  - id: installation_summary
    type: EchoBlock
    inputs:
      message: |
        pip Installation Summary:
        - Package: ${inputs.package_name}
        - Version Constraint: ${inputs.version}
        - Extras: ${inputs.extras}
        - Exit Code: ${blocks.install_package.outputs.exit_code}
        - Installed Version: ${blocks.verify_installation.outputs.stdout}
        - Install Location: ${blocks.get_install_location.outputs.stdout}
        - Command: ${blocks.build_install_command.outputs.stdout}
    depends_on:
      - install_package
      - verify_installation
      - get_install_location

outputs:
  success: "${blocks.install_package.outputs.exit_code} == 0"
  installed_version: "${blocks.verify_installation.outputs.stdout}"
  install_location: "${blocks.get_install_location.outputs.stdout}"
  exit_code: "${blocks.install_package.outputs.exit_code}"
  stdout: "${blocks.install_package.outputs.stdout}"
  stderr: "${blocks.install_package.outputs.stderr}"
  command_executed: "${blocks.build_install_command.outputs.stdout}"
  summary: "${blocks.installation_summary.outputs.echoed}"
